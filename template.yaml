AWSTemplateFormatVersion: '2010-09-01'
Transform: AWS::Serverless-2016-10-31
Description: Slack Thank You Points System

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Environment:
      Variables:
        SLACK_BOT_TOKEN: !Sub '{{resolve:secretsmanager:${AWS::StackName}/slack-token:SecretString:SLACK_BOT_TOKEN}}'
        SLACK_SIGNING_SECRET: !Sub '{{resolve:secretsmanager:${AWS::StackName}/slack-secret:SecretString:SLACK_SIGNING_SECRET}}'

Resources:
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-users
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-transactions
      AttributeDefinitions:
        - AttributeName: transaction_id
          AttributeType: S
      KeySchema:
        - AttributeName: transaction_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Functions
  EventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: event-handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /slack/events
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName

  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: notification
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref NotificationTopic
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable

  ResetFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: reset-handler
      Events:
        DailyEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 * * ? *)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable

  # SNS Topic
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-notifications

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/slack/events